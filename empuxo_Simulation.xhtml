<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Empuxo</title>
    <link rel="stylesheet"  type="text/css" href="library/css/ejss.css" />
    <script src="library/scripts/common_script.js"></script>
    <script src="library/scripts/textresizedetector.js"></script>
    <script src="library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function empuxo(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var mainWidth; // EjsS Model.Variables.DisplayVars.mainWidth
  var mainWidth2; // EjsS Model.Variables.DisplayVars.mainWidth2
  var centerWidth; // EjsS Model.Variables.DisplayVars.centerWidth
  var middleHeight; // EjsS Model.Variables.DisplayVars.middleHeight

  var t; // EjsS Model.Variables.global.t
  var dt; // EjsS Model.Variables.global.dt
  var xmin; // EjsS Model.Variables.global.xmin
  var xmax; // EjsS Model.Variables.global.xmax
  var ymin; // EjsS Model.Variables.global.ymin
  var ymax; // EjsS Model.Variables.global.ymax
  var zmin; // EjsS Model.Variables.global.zmin
  var zmax; // EjsS Model.Variables.global.zmax

  var densf; // EjsS Model.Variables.Pool.densf
  var Wx; // EjsS Model.Variables.Pool.Wx
  var Wy; // EjsS Model.Variables.Pool.Wy
  var Wz; // EjsS Model.Variables.Pool.Wz
  var Olevel; // EjsS Model.Variables.Pool.Olevel
  var zBase; // EjsS Model.Variables.Pool.zBase
  var dWz; // EjsS Model.Variables.Pool.dWz

  var lx; // EjsS Model.Variables.Blocks.lx
  var ly; // EjsS Model.Variables.Blocks.ly
  var lz; // EjsS Model.Variables.Blocks.lz
  var vol; // EjsS Model.Variables.Blocks.vol
  var vol_in; // EjsS Model.Variables.Blocks.vol_in
  var dens; // EjsS Model.Variables.Blocks.dens
  var m; // EjsS Model.Variables.Blocks.m
  var x; // EjsS Model.Variables.Blocks.x
  var y; // EjsS Model.Variables.Blocks.y
  var z; // EjsS Model.Variables.Blocks.z
  var r; // EjsS Model.Variables.Blocks.r
  var v; // EjsS Model.Variables.Blocks.v
  var a; // EjsS Model.Variables.Blocks.a
  var fe; // EjsS Model.Variables.Blocks.fe
  var fg; // EjsS Model.Variables.Blocks.fg
  var fc; // EjsS Model.Variables.Blocks.fc
  var g; // EjsS Model.Variables.Blocks.g

  var Trenas; // EjsS Model.Variables.Trenas.Trenas
  var VTrenas; // EjsS Model.Variables.Trenas.VTrenas
  var wt; // EjsS Model.Variables.Trenas.wt
  var xti; // EjsS Model.Variables.Trenas.xti
  var yti; // EjsS Model.Variables.Trenas.yti
  var xtm; // EjsS Model.Variables.Trenas.xtm
  var ytm; // EjsS Model.Variables.Trenas.ytm
  var xtf; // EjsS Model.Variables.Trenas.xtf
  var ytf; // EjsS Model.Variables.Trenas.ytf
  var dxt; // EjsS Model.Variables.Trenas.dxt
  var dyt; // EjsS Model.Variables.Trenas.dyt
  var phit; // EjsS Model.Variables.Trenas.phit
  var lent; // EjsS Model.Variables.Trenas.lent
  var lentstring; // EjsS Model.Variables.Trenas.lentstring
  var vist; // EjsS Model.Variables.Trenas.vist
  var post; // EjsS Model.Variables.Trenas.post

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      mainWidth : mainWidth,
      mainWidth2 : mainWidth2,
      centerWidth : centerWidth,
      middleHeight : middleHeight,
      t : t,
      dt : dt,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      zmin : zmin,
      zmax : zmax,
      densf : densf,
      Wx : Wx,
      Wy : Wy,
      Wz : Wz,
      Olevel : Olevel,
      zBase : zBase,
      dWz : dWz,
      lx : lx,
      ly : ly,
      lz : lz,
      vol : vol,
      vol_in : vol_in,
      dens : dens,
      m : m,
      x : x,
      y : y,
      z : z,
      r : r,
      v : v,
      a : a,
      fe : fe,
      fg : fg,
      fc : fc,
      g : g,
      Trenas : Trenas,
      VTrenas : VTrenas,
      wt : wt,
      xti : xti,
      yti : yti,
      xtm : xtm,
      ytm : ytm,
      xtf : xtf,
      ytf : ytf,
      dxt : dxt,
      dyt : dyt,
      phit : phit,
      lent : lent,
      lentstring : lentstring,
      vist : vist,
      post : post
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      mainWidth : mainWidth,
      mainWidth2 : mainWidth2,
      centerWidth : centerWidth,
      middleHeight : middleHeight,
      t : t,
      dt : dt,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      zmin : zmin,
      zmax : zmax,
      densf : densf,
      Wx : Wx,
      Wy : Wy,
      Wz : Wz,
      Olevel : Olevel,
      zBase : zBase,
      dWz : dWz,
      lx : lx,
      ly : ly,
      lz : lz,
      vol : vol,
      vol_in : vol_in,
      dens : dens,
      m : m,
      x : x,
      y : y,
      z : z,
      r : r,
      v : v,
      a : a,
      fe : fe,
      fg : fg,
      fc : fc,
      g : g,
      Trenas : Trenas,
      VTrenas : VTrenas,
      wt : wt,
      xti : xti,
      yti : yti,
      xtm : xtm,
      ytm : ytm,
      xtf : xtf,
      ytf : ytf,
      dxt : dxt,
      dyt : dyt,
      phit : phit,
      lent : lent,
      lentstring : lentstring,
      vist : vist,
      post : post
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.mainWidth != "undefined") mainWidth = json.mainWidth;
    if(typeof json.mainWidth2 != "undefined") mainWidth2 = json.mainWidth2;
    if(typeof json.centerWidth != "undefined") centerWidth = json.centerWidth;
    if(typeof json.middleHeight != "undefined") middleHeight = json.middleHeight;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.zmin != "undefined") zmin = json.zmin;
    if(typeof json.zmax != "undefined") zmax = json.zmax;
    if(typeof json.densf != "undefined") densf = json.densf;
    if(typeof json.Wx != "undefined") Wx = json.Wx;
    if(typeof json.Wy != "undefined") Wy = json.Wy;
    if(typeof json.Wz != "undefined") Wz = json.Wz;
    if(typeof json.Olevel != "undefined") Olevel = json.Olevel;
    if(typeof json.zBase != "undefined") zBase = json.zBase;
    if(typeof json.dWz != "undefined") dWz = json.dWz;
    if(typeof json.lx != "undefined") lx = json.lx;
    if(typeof json.ly != "undefined") ly = json.ly;
    if(typeof json.lz != "undefined") lz = json.lz;
    if(typeof json.vol != "undefined") vol = json.vol;
    if(typeof json.vol_in != "undefined") vol_in = json.vol_in;
    if(typeof json.dens != "undefined") dens = json.dens;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.z != "undefined") z = json.z;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.fe != "undefined") fe = json.fe;
    if(typeof json.fg != "undefined") fg = json.fg;
    if(typeof json.fc != "undefined") fc = json.fc;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.Trenas != "undefined") Trenas = json.Trenas;
    if(typeof json.VTrenas != "undefined") VTrenas = json.VTrenas;
    if(typeof json.wt != "undefined") wt = json.wt;
    if(typeof json.xti != "undefined") xti = json.xti;
    if(typeof json.yti != "undefined") yti = json.yti;
    if(typeof json.xtm != "undefined") xtm = json.xtm;
    if(typeof json.ytm != "undefined") ytm = json.ytm;
    if(typeof json.xtf != "undefined") xtf = json.xtf;
    if(typeof json.ytf != "undefined") ytf = json.ytf;
    if(typeof json.dxt != "undefined") dxt = json.dxt;
    if(typeof json.dyt != "undefined") dyt = json.dyt;
    if(typeof json.phit != "undefined") phit = json.phit;
    if(typeof json.lent != "undefined") lent = json.lent;
    if(typeof json.lentstring != "undefined") lentstring = json.lentstring;
    if(typeof json.vist != "undefined") vist = json.vist;
    if(typeof json.post != "undefined") post = json.post;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.mainWidth != "undefined") mainWidth = json.mainWidth;
    if(typeof json.mainWidth2 != "undefined") mainWidth2 = json.mainWidth2;
    if(typeof json.centerWidth != "undefined") centerWidth = json.centerWidth;
    if(typeof json.middleHeight != "undefined") middleHeight = json.middleHeight;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.zmin != "undefined") zmin = json.zmin;
    if(typeof json.zmax != "undefined") zmax = json.zmax;
    if(typeof json.densf != "undefined") densf = json.densf;
    if(typeof json.Wx != "undefined") Wx = json.Wx;
    if(typeof json.Wy != "undefined") Wy = json.Wy;
    if(typeof json.Wz != "undefined") Wz = json.Wz;
    if(typeof json.Olevel != "undefined") Olevel = json.Olevel;
    if(typeof json.zBase != "undefined") zBase = json.zBase;
    if(typeof json.dWz != "undefined") dWz = json.dWz;
    if(typeof json.lx != "undefined") lx = json.lx;
    if(typeof json.ly != "undefined") ly = json.ly;
    if(typeof json.lz != "undefined") lz = json.lz;
    if(typeof json.vol != "undefined") vol = json.vol;
    if(typeof json.vol_in != "undefined") vol_in = json.vol_in;
    if(typeof json.dens != "undefined") dens = json.dens;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.z != "undefined") z = json.z;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.fe != "undefined") fe = json.fe;
    if(typeof json.fg != "undefined") fg = json.fg;
    if(typeof json.fc != "undefined") fc = json.fc;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.Trenas != "undefined") Trenas = json.Trenas;
    if(typeof json.VTrenas != "undefined") VTrenas = json.VTrenas;
    if(typeof json.wt != "undefined") wt = json.wt;
    if(typeof json.xti != "undefined") xti = json.xti;
    if(typeof json.yti != "undefined") yti = json.yti;
    if(typeof json.xtm != "undefined") xtm = json.xtm;
    if(typeof json.ytm != "undefined") ytm = json.ytm;
    if(typeof json.xtf != "undefined") xtf = json.xtf;
    if(typeof json.ytf != "undefined") ytf = json.ytf;
    if(typeof json.dxt != "undefined") dxt = json.dxt;
    if(typeof json.dyt != "undefined") dyt = json.dyt;
    if(typeof json.phit != "undefined") phit = json.phit;
    if(typeof json.lent != "undefined") lent = json.lent;
    if(typeof json.lentstring != "undefined") lentstring = json.lentstring;
    if(typeof json.vist != "undefined") vist = json.vist;
    if(typeof json.post != "undefined") post = json.post;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    mainWidth = (_isMobile||_isEPub)?"400px":"600px"; // EjsS Model.Variables.DisplayVars.mainWidth
    mainWidth2 = (_isMobile||_isEPub)?"400px":"800px"; // EjsS Model.Variables.DisplayVars.mainWidth2
    centerWidth = (_isMobile||_isEPub)?"300px":"500px"; // EjsS Model.Variables.DisplayVars.centerWidth
    middleHeight = (_isMobile||_isEPub)?"350px":"400px"; // EjsS Model.Variables.DisplayVars.middleHeight
  });

  _model.addToReset(function() {
    t = 0; // EjsS Model.Variables.global.t
    dt = 0.001; // EjsS Model.Variables.global.dt
    xmin = -1; // EjsS Model.Variables.global.xmin
    xmax = 1; // EjsS Model.Variables.global.xmax
    ymin = -1; // EjsS Model.Variables.global.ymin
    ymax = 1; // EjsS Model.Variables.global.ymax
    zmin = -1; // EjsS Model.Variables.global.zmin
    zmax = 1; // EjsS Model.Variables.global.zmax
  });

  _model.addToReset(function() {
    densf = 998.2; // EjsS Model.Variables.Pool.densf
    Wx = 0.5*(xmax-xmin); // EjsS Model.Variables.Pool.Wx
    Wy = 0.5*(ymax-ymin); // EjsS Model.Variables.Pool.Wy
    Wz = 0.3*(zmax-zmin); // EjsS Model.Variables.Pool.Wz
    Olevel = 0.0; // EjsS Model.Variables.Pool.Olevel
    zBase = Olevel-Wz; // EjsS Model.Variables.Pool.zBase
    dWz = 0; // EjsS Model.Variables.Pool.dWz
  });

  _model.addToReset(function() {
    lx = 0.2; // EjsS Model.Variables.Blocks.lx
    ly = 0.2; // EjsS Model.Variables.Blocks.ly
    lz = 0.2; // EjsS Model.Variables.Blocks.lz
    vol = lx*ly*lz; // EjsS Model.Variables.Blocks.vol
    dens = 510; // EjsS Model.Variables.Blocks.dens
    m = dens*vol; // EjsS Model.Variables.Blocks.m
    r = new Array(3); // EjsS Model.Variables.Blocks.r
    v = new Array(3); // EjsS Model.Variables.Blocks.v
    a = new Array(3); // EjsS Model.Variables.Blocks.a
    fe = new Array(3); // EjsS Model.Variables.Blocks.fe
    fg = new Array(3); // EjsS Model.Variables.Blocks.fg
    fc = new Array(3); // EjsS Model.Variables.Blocks.fc
    g = 9.82; // EjsS Model.Variables.Blocks.g
  });

  _model.addToReset(function() {
    Trenas = 3; // EjsS Model.Variables.Trenas.Trenas
    VTrenas = 0; // EjsS Model.Variables.Trenas.VTrenas
    wt = 0.05*Wx; // EjsS Model.Variables.Trenas.wt
    xti = new Array(Trenas); // EjsS Model.Variables.Trenas.xti
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.xti
        xti[_i0] = -Wx+2*wt;  // EjsS Model.Variables.Trenas.xti
      }
    }());
    yti = new Array(Trenas); // EjsS Model.Variables.Trenas.yti
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.yti
        yti[_i0] = Wx-2*wt;  // EjsS Model.Variables.Trenas.yti
      }
    }());
    xtm = new Array(Trenas); // EjsS Model.Variables.Trenas.xtm
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.xtm
        xtm[_i0] = 0;  // EjsS Model.Variables.Trenas.xtm
      }
    }());
    ytm = new Array(Trenas); // EjsS Model.Variables.Trenas.ytm
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.ytm
        ytm[_i0] = 0;  // EjsS Model.Variables.Trenas.ytm
      }
    }());
    xtf = new Array(Trenas); // EjsS Model.Variables.Trenas.xtf
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.xtf
        xtf[_i0] = 0;  // EjsS Model.Variables.Trenas.xtf
      }
    }());
    ytf = new Array(Trenas); // EjsS Model.Variables.Trenas.ytf
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.ytf
        ytf[_i0] = 0;  // EjsS Model.Variables.Trenas.ytf
      }
    }());
    dxt = new Array(Trenas); // EjsS Model.Variables.Trenas.dxt
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.dxt
        dxt[_i0] = 0.5*Wx;  // EjsS Model.Variables.Trenas.dxt
      }
    }());
    dyt = new Array(Trenas); // EjsS Model.Variables.Trenas.dyt
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.dyt
        dyt[_i0] = 0;  // EjsS Model.Variables.Trenas.dyt
      }
    }());
    phit = new Array(Trenas); // EjsS Model.Variables.Trenas.phit
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.phit
        phit[_i0] = 0;  // EjsS Model.Variables.Trenas.phit
      }
    }());
    lent = new Array(Trenas); // EjsS Model.Variables.Trenas.lent
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.lent
        lent[_i0] = 0.5*Wx;  // EjsS Model.Variables.Trenas.lent
      }
    }());
    lentstring = new Array(Trenas); // EjsS Model.Variables.Trenas.lentstring
    vist = new Array(Trenas); // EjsS Model.Variables.Trenas.vist
    (function () {
      var _i0;
      for (_i0=0; _i0<Trenas; _i0+=1) {  // EjsS Model.Variables.Trenas.vist
        vist[_i0] = false;  // EjsS Model.Variables.Trenas.vist
      }
    }());
    post = new Array(2); // EjsS Model.Variables.Trenas.post
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(50);
  });

  function init() {  // > CustomCode.init:1
    r[0] = 0;  // > CustomCode.init:2
    r[1] = 0;  // > CustomCode.init:3
    r[2] = Olevel;  // > CustomCode.init:4
      // > CustomCode.init:5
    v[0] = 0;  // > CustomCode.init:6
    v[1] = 0;  // > CustomCode.init:7
    v[2] = 0;  // > CustomCode.init:8
      // > CustomCode.init:9
    x=r[0];  // > CustomCode.init:10
    y=r[1];  // > CustomCode.init:11
    z=r[2];  // > CustomCode.init:12
      // > CustomCode.init:13
    vol_in = ((zBase+Wz) - r[2])*lx*ly;    // > CustomCode.init:14
    force();  // > CustomCode.init:15
  }  // > CustomCode.init:16

  function addTrena () {  // > CustomCode.Trenas:1
    if(VTrenas<Trenas){  // > CustomCode.Trenas:2
      vist[VTrenas]=true;  // > CustomCode.Trenas:3
      // > CustomCode.Trenas:4
      xtf[VTrenas] = xti[VTrenas] + dxt[VTrenas];  // > CustomCode.Trenas:5
      ytf[VTrenas] = yti[VTrenas] + dyt[VTrenas];  // > CustomCode.Trenas:6
      // > CustomCode.Trenas:7
      xtm[VTrenas] = xti[VTrenas] + 0.5*dxt[VTrenas];  // > CustomCode.Trenas:8
      ytm[VTrenas] = yti[VTrenas] + 0.5*dyt[VTrenas];  // > CustomCode.Trenas:9
        // > CustomCode.Trenas:10
        // > CustomCode.Trenas:11
        // > CustomCode.Trenas:12
      lent[VTrenas] = Math.sqrt(dxt[VTrenas]*dxt[VTrenas]+dyt[VTrenas]*dyt[VTrenas]);  // > CustomCode.Trenas:13
      lentstring[VTrenas] = Math.floor(lent[VTrenas]*100)/100;  // > CustomCode.Trenas:14
        // > CustomCode.Trenas:15
        // > CustomCode.Trenas:16
      phit[VTrenas] = Math.atan2(dyt[VTrenas],dxt[VTrenas]);  // > CustomCode.Trenas:17
      xtm[VTrenas] = xtm[VTrenas]+wt*Math.cos(phit[VTrenas]+Math.PI/2);  // > CustomCode.Trenas:18
      ytm[VTrenas] = ytm[VTrenas]+wt*Math.sin(phit[VTrenas]+Math.PI/2);  // > CustomCode.Trenas:19
        // > CustomCode.Trenas:20
      VTrenas = VTrenas + 1;  // > CustomCode.Trenas:21
    }  // > CustomCode.Trenas:22
  }  // > CustomCode.Trenas:23
  function moveTrena () {  // > CustomCode.Trenas:24
    post = _view.drawingPanel.getInteraction().getInteractionPoint();  // > CustomCode.Trenas:25
    var i = 0  // > CustomCode.Trenas:26
    var j;  // > CustomCode.Trenas:27
    if(VTrenas>0){  // > CustomCode.Trenas:28
      for( i = 0; i< VTrenas; i=i+1){  // > CustomCode.Trenas:29
        var ddx = post[0] - xti[i];  // > CustomCode.Trenas:30
        var ddy = post[1] - yti[i];  // > CustomCode.Trenas:31
        var dist = ddx*ddx+ddy*ddy;  // > CustomCode.Trenas:32
        dist = Math.sqrt(dist)  // > CustomCode.Trenas:33
        if (dist < 0.5*wt ) {  // > CustomCode.Trenas:34
          j=i;  // > CustomCode.Trenas:35
          break;  // > CustomCode.Trenas:36
          }  // > CustomCode.Trenas:37
      }  // > CustomCode.Trenas:38
      // > CustomCode.Trenas:39
      xti[j] = post[0];  // > CustomCode.Trenas:40
      yti[j] = post[1];  // > CustomCode.Trenas:41
      // > CustomCode.Trenas:42
      xtf[j] = xti[j]+dxt[j];  // > CustomCode.Trenas:43
      ytf[j] = yti[j]+dyt[j];  // > CustomCode.Trenas:44
      xtm[j] = xti[j]+0.5*dxt[j];  // > CustomCode.Trenas:45
      ytm[j] = yti[j]+0.5*dyt[j];  // > CustomCode.Trenas:46
      xtm[j] = xtm[j]+wt*Math.cos(phit[j]+Math.PI/2);  // > CustomCode.Trenas:47
      ytm[j] = ytm[j]+wt*Math.sin(phit[j]+Math.PI/2);  // > CustomCode.Trenas:48
    }  // > CustomCode.Trenas:49
      // > CustomCode.Trenas:50
  }  // > CustomCode.Trenas:51
  function resizeTrena () {  // > CustomCode.Trenas:52
    post = _view.drawingPanel.getInteraction().getInteractionPoint();  // > CustomCode.Trenas:53
    var i = 0  // > CustomCode.Trenas:54
    var j;  // > CustomCode.Trenas:55
    if(VTrenas>0){  // > CustomCode.Trenas:56
      for( i = 0; i< VTrenas; i=i+1){  // > CustomCode.Trenas:57
        var ddx = post[0] - xtf[i];  // > CustomCode.Trenas:58
        var ddy = post[1] - ytf[i];  // > CustomCode.Trenas:59
        var dist = ddx*ddx+ddy*ddy;  // > CustomCode.Trenas:60
        dist = Math.sqrt(dist)  // > CustomCode.Trenas:61
        if (dist < 2*wt ) {  // > CustomCode.Trenas:62
          j=i;  // > CustomCode.Trenas:63
          break;  // > CustomCode.Trenas:64
          }  // > CustomCode.Trenas:65
      }  // > CustomCode.Trenas:66
      // > CustomCode.Trenas:67
      xtf[j] = post[0];  // > CustomCode.Trenas:68
      ytf[j] = post[1];  // > CustomCode.Trenas:69
        // > CustomCode.Trenas:70
      dxt[j] = (xtf[j] - xti[j]);  // > CustomCode.Trenas:71
      dyt[j] = (ytf[j] - yti[j]);  // > CustomCode.Trenas:72
        // > CustomCode.Trenas:73
      xtm[j] = xti[j]+0.5*dxt[j];  // > CustomCode.Trenas:74
      ytm[j] = yti[j]+0.5*dyt[j];  // > CustomCode.Trenas:75
        // > CustomCode.Trenas:76
      lent[j] = Math.sqrt(dxt[j]*dxt[j]+dyt[j]*dyt[j]);  // > CustomCode.Trenas:77
      lentstring[j] = Math.floor(lent[j]*100)/100;  // > CustomCode.Trenas:78
      phit[j] = Math.atan2(dyt[j],dxt[j]);  // > CustomCode.Trenas:79
       xtm[j] = xtm[j]+wt*Math.cos(phit[j]+Math.PI/2);  // > CustomCode.Trenas:80
      ytm[j] = ytm[j]+wt*Math.sin(phit[j]+Math.PI/2);  // > CustomCode.Trenas:81
       // > CustomCode.Trenas:82
    }    // > CustomCode.Trenas:83
  }  // > CustomCode.Trenas:84

  function force () {  // > CustomCode.force:1
      // > CustomCode.force:2
    vol_in = ((zBase+Wz) - r[2])*lx*ly;    // > CustomCode.force:3
    if(vol_in<0) vol_in=0.0;  // > CustomCode.force:4
    if(vol_in>vol) vol_in=vol;  // > CustomCode.force:5
      // > CustomCode.force:6
    fc[0] = 0;  // > CustomCode.force:7
    fc[1] = 0;  // > CustomCode.force:8
    fc[2] = 0;  // > CustomCode.force:9
      // > CustomCode.force:10
    fe[0] = 0;  // > CustomCode.force:11
    fe[1] = 0;  // > CustomCode.force:12
    fe[2] = densf*vol_in*g;  // > CustomCode.force:13
      // > CustomCode.force:14
    fg[0] = 0;  // > CustomCode.force:15
    fg[1] = 0;  // > CustomCode.force:16
    fg[2] = -dens*vol*g;  // > CustomCode.force:17
    if(r[2] <= zBase && fg[2]< -fe[2]) {// peso+empuxo<0 mantem colado  // > CustomCode.force:18
      fc[2] = -fg[2]-fe[2];  // > CustomCode.force:19
      r[2] = zBase;  // > CustomCode.force:20
      v[2] = 0.0;  // > CustomCode.force:21
     }  // > CustomCode.force:22
    a[0] = 0;  // > CustomCode.force:23
    a[1] = 0;  // > CustomCode.force:24
    a[2] = (fe[2]+fg[2]+fc[2])/(dens*vol) - 2*v[2];  // > CustomCode.force:25
      // > CustomCode.force:26
  }  // > CustomCode.force:27

  function changeDensMass () {  // > CustomCode.changeDensMass:1
    vol= m/dens;  // > CustomCode.changeDensMass:2
    lx = Math.pow(vol, 1.0/3.0);  // > CustomCode.changeDensMass:3
    ly = lx;  // > CustomCode.changeDensMass:4
    lz = lx;  // > CustomCode.changeDensMass:5
    m  =  dens*vol;  // > CustomCode.changeDensMass:6
  }  // > CustomCode.changeDensMass:7

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    init();  // > Initialization.Init Page:1
    addTrena();  // > Initialization.Init Page:2
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    x=r[0];  // > FixedRelations.FixRel Page:1
    y=r[1];  // > FixedRelations.FixRel Page:2
    z=r[2];  // > FixedRelations.FixRel Page:3
    force();  // > FixedRelations.FixRel Page:4
    dWz = vol_in/Wx*Wy;  // > FixedRelations.FixRel Page:5
    Wz =dWz-zBase;  // > FixedRelations.FixRel Page:6
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _rLength;
    var _vLength;

    __odeSelf._getOdeVars = function (){ return["r","v","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _rLength = r.length;
      _vLength = v.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_rLength; __j++)
          if (__state[__n++]!=r[__j] || __state[__n++]!=v[__j]) { __mustReinitialize = true; break; }
      for (__j=0; __j<_rLength; __j++) { // These two alternate in the state
         __state[__cIn++] = r[__j];
         __state[__cIn++] = v[__j];
      }
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      if (_rLength != r.length) return true;
      if (_vLength != v.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_rLength; __i++) { // These two alternate in the state
          r[__i] = __state[__cOut++];
          v[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var r = [];
        var v = [];
        for (__i=0; __i<_rLength; __i++) { // These two alternate in the state
          r[__i] = _aState[__cOut++];
          v[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        for (__i=0;__i<_rLength;__i++) { // These two alternate in the state
          _aRate[__cRate++] = Array.isArray(v[__i]) ? v[__i][__i] : v[__i]; // Rate for ODE: Evol Page:r
          _aRate[__cRate++] = Array.isArray(a[__i]) ? a[__i][__i] : a[__i]; // Rate for ODE: Evol Page:v
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var r = [];
        var v = [];
        for (__i=0; __i<_rLength; __i++) { // These two alternate in the state
          r[__i] = _aState[__cOut++];
          v[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_rLength; __i++) { // These two alternate in the state
          r[__i] = __state[__cOut++];
          v[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_rLength; __j++) { // These two alternate in the state
         __state[__cIn++] = r[__j];
         __state[__cIn++] = v[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_r(__time) {
    var __beginIndex = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(r.length),__beginIndex,r.ength);
  }

  function _historic_v(__time) {
    var __beginIndex = 0 + r.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(v.length),__beginIndex,v.ength);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new empuxo_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.tablePanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'tablePanel'
          _view.topPanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'topPanel'
          _view.mass_slider.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'mass_slider'
          _view.mass_slider.setAction("OnChange", function(_data,_info) {
  changeDensMass();
  _update();

}); // HtmlView Page setting action 'OnChange' for element 'mass_slider'
          _view.dens_slider.linkProperty("Value",  function() { return dens; }, function(_v) { dens = _v; } ); // HtmlView Page linking property 'Value' for element 'dens_slider'
          _view.dens_slider.setAction("OnChange", function(_data,_info) {
  changeDensMass();
  _update();

}); // HtmlView Page setting action 'OnChange' for element 'dens_slider'
          _view.middlePanel.linkProperty("Height",  function() { return middleHeight; }, function(_v) { middleHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'middlePanel'
          _view.middlePanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'middlePanel'
          _view.centerPanel.linkProperty("Height",  function() { return middleHeight; }, function(_v) { middleHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'centerPanel'
          _view.centerPanel.linkProperty("Width",  function() { return centerWidth; }, function(_v) { centerWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'centerPanel'
          _view.drawingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MinimumY",  function() { return zmin; }, function(_v) { zmin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumY",  function() { return zmax; }, function(_v) { zmax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'drawingPanel'
          _view.bloco.linkProperty("SizeX",  function() { return lx; }, function(_v) { lx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'bloco'
          _view.bloco.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'bloco'
          _view.bloco.linkProperty("Y",  function() { return z; }, function(_v) { z = _v; } ); // HtmlView Page linking property 'Y' for element 'bloco'
          _view.bloco.linkProperty("SizeY",  function() { return lz; }, function(_v) { lz = _v; } ); // HtmlView Page linking property 'SizeY' for element 'bloco'
          _view.bloco.setAction("OnDrag", function(_data,_info) {
  r[0]=x;
  r[2]=z;

}); // HtmlView Page setting action 'OnDrag' for element 'bloco'
          _view.piscina.linkProperty("SizeX",  function() { return Wx; }, function(_v) { Wx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'piscina'
          _view.piscina.linkProperty("Y",  function() { return zBase; }, function(_v) { zBase = _v; } ); // HtmlView Page linking property 'Y' for element 'piscina'
          _view.piscina.linkProperty("SizeY",  function() { return Wz; }, function(_v) { Wz = _v; } ); // HtmlView Page linking property 'SizeY' for element 'piscina'
          _view.grama222.linkProperty("SizeX",  function() { return (xmax-xmin); } ); // HtmlView Page linking property 'SizeX' for element 'grama222'
          _view.grama222.linkProperty("X",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'X' for element 'grama222'
          _view.grama222.linkProperty("Y",  function() { return zmin; }, function(_v) { zmin = _v; } ); // HtmlView Page linking property 'Y' for element 'grama222'
          _view.grama222.linkProperty("SizeY",  function() { return 0.5*(zmax-zmin)+zBase; } ); // HtmlView Page linking property 'SizeY' for element 'grama222'
          _view.grama22.linkProperty("SizeX",  function() { return 0.5*((xmax-xmin)-Wx); } ); // HtmlView Page linking property 'SizeX' for element 'grama22'
          _view.grama22.linkProperty("X",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'X' for element 'grama22'
          _view.grama22.linkProperty("Y",  function() { return zBase; }, function(_v) { zBase = _v; } ); // HtmlView Page linking property 'Y' for element 'grama22'
          _view.grama22.linkProperty("SizeY",  function() { return -1.1*zBase; } ); // HtmlView Page linking property 'SizeY' for element 'grama22'
          _view.grama2.linkProperty("SizeX",  function() { return 0.5*((xmax-xmin)-Wx); } ); // HtmlView Page linking property 'SizeX' for element 'grama2'
          _view.grama2.linkProperty("X",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'X' for element 'grama2'
          _view.grama2.linkProperty("Y",  function() { return zBase; }, function(_v) { zBase = _v; } ); // HtmlView Page linking property 'Y' for element 'grama2'
          _view.grama2.linkProperty("SizeY",  function() { return -1.1*zBase; } ); // HtmlView Page linking property 'SizeY' for element 'grama2'
          _view.empuxo.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'empuxo'
          _view.empuxo.linkProperty("Y",  function() { return z; }, function(_v) { z = _v; } ); // HtmlView Page linking property 'Y' for element 'empuxo'
          _view.empuxo.linkProperty("SizeY",  function() { return 0.01*fe[2]; } ); // HtmlView Page linking property 'SizeY' for element 'empuxo'
          _view.peso.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'peso'
          _view.peso.linkProperty("Y",  function() { return z; }, function(_v) { z = _v; } ); // HtmlView Page linking property 'Y' for element 'peso'
          _view.peso.linkProperty("SizeY",  function() { return 0.01*fg[2]; } ); // HtmlView Page linking property 'SizeY' for element 'peso'
          _view.normal.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'normal'
          _view.normal.linkProperty("Y",  function() { return z; }, function(_v) { z = _v; } ); // HtmlView Page linking property 'Y' for element 'normal'
          _view.normal.linkProperty("Visibility",  function() { return fc[2]>0; } ); // HtmlView Page linking property 'Visibility' for element 'normal'
          _view.normal.linkProperty("SizeY",  function() { return 0.01*fc[2]; } ); // HtmlView Page linking property 'SizeY' for element 'normal'
          _view.mass_text.linkProperty("X",  function() { return Wx; }, function(_v) { Wx = _v; } ); // HtmlView Page linking property 'X' for element 'mass_text'
          _view.mass_text.linkProperty("Y",  function() { return Wx-0.1; } ); // HtmlView Page linking property 'Y' for element 'mass_text'
          _view.mass_text.linkProperty("Text",  function() { return "massa="+Math.floor(m*100)/100 + " kg"; } ); // HtmlView Page linking property 'Text' for element 'mass_text'
          _view.dens_text.linkProperty("X",  function() { return Wx; }, function(_v) { Wx = _v; } ); // HtmlView Page linking property 'X' for element 'dens_text'
          _view.dens_text.linkProperty("Y",  function() { return Wx; }, function(_v) { Wx = _v; } ); // HtmlView Page linking property 'Y' for element 'dens_text'
          _view.dens_text.linkProperty("Text",  function() { return "dens="+Math.floor(dens*100)/100 +"kg/m3"; } ); // HtmlView Page linking property 'Text' for element 'dens_text'
          _view.Trenas0.linkProperty("X",  function() { return -Wx+wt; } ); // HtmlView Page linking property 'X' for element 'Trenas0'
          _view.Trenas0.linkProperty("Y",  function() { return Wx-wt; } ); // HtmlView Page linking property 'Y' for element 'Trenas0'
          _view.Trenas1.linkProperty("NumberOfElements",  function() { return Trenas; }, function(_v) { Trenas = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Trenas1'
          _view.Trenas1.linkProperty("Transformation",  function() { return phit; }, function(_v) { phit = _v; } ); // HtmlView Page linking property 'Transformation' for element 'Trenas1'
          _view.Trenas1.setAction("OnDrag", moveTrena); // HtmlView Page setting action 'OnDrag' for element 'Trenas1'
          _view.Trenas1.linkProperty("SizeX",  function() { return wt; }, function(_v) { wt = _v; } ); // HtmlView Page linking property 'SizeX' for element 'Trenas1'
          _view.Trenas1.linkProperty("X",  function() { return xti; }, function(_v) { xti = _v; } ); // HtmlView Page linking property 'X' for element 'Trenas1'
          _view.Trenas1.linkProperty("Y",  function() { return yti; }, function(_v) { yti = _v; } ); // HtmlView Page linking property 'Y' for element 'Trenas1'
          _view.Trenas1.linkProperty("Visibility",  function() { return vist; }, function(_v) { vist = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Trenas1'
          _view.Trenas1.linkProperty("SizeY",  function() { return wt; }, function(_v) { wt = _v; } ); // HtmlView Page linking property 'SizeY' for element 'Trenas1'
          _view.Trenas2.linkProperty("NumberOfElements",  function() { return Trenas; }, function(_v) { Trenas = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Trenas2'
          _view.Trenas2.linkProperty("SizeX",  function() { return dxt; }, function(_v) { dxt = _v; } ); // HtmlView Page linking property 'SizeX' for element 'Trenas2'
          _view.Trenas2.linkProperty("X",  function() { return xti; }, function(_v) { xti = _v; } ); // HtmlView Page linking property 'X' for element 'Trenas2'
          _view.Trenas2.linkProperty("Y",  function() { return yti; }, function(_v) { yti = _v; } ); // HtmlView Page linking property 'Y' for element 'Trenas2'
          _view.Trenas2.linkProperty("Visibility",  function() { return vist; }, function(_v) { vist = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Trenas2'
          _view.Trenas2.linkProperty("SizeY",  function() { return dyt; }, function(_v) { dyt = _v; } ); // HtmlView Page linking property 'SizeY' for element 'Trenas2'
          _view.Trenas3.linkProperty("NumberOfElements",  function() { return Trenas; }, function(_v) { Trenas = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Trenas3'
          _view.Trenas3.linkProperty("Transformation",  function() { return phit; }, function(_v) { phit = _v; } ); // HtmlView Page linking property 'Transformation' for element 'Trenas3'
          _view.Trenas3.linkProperty("X",  function() { return xtf; }, function(_v) { xtf = _v; } ); // HtmlView Page linking property 'X' for element 'Trenas3'
          _view.Trenas3.linkProperty("Y",  function() { return ytf; }, function(_v) { ytf = _v; } ); // HtmlView Page linking property 'Y' for element 'Trenas3'
          _view.Trenas3.linkProperty("Visibility",  function() { return vist; }, function(_v) { vist = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Trenas3'
          _view.Trenas3.linkProperty("SizeY",  function() { return wt; }, function(_v) { wt = _v; } ); // HtmlView Page linking property 'SizeY' for element 'Trenas3'
          _view.Trenas3.setAction("OnDrag", resizeTrena); // HtmlView Page setting action 'OnDrag' for element 'Trenas3'
          _view.Trenas4.linkProperty("NumberOfElements",  function() { return Trenas; }, function(_v) { Trenas = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Trenas4'
          _view.Trenas4.linkProperty("Transformation",  function() { return phit; }, function(_v) { phit = _v; } ); // HtmlView Page linking property 'Transformation' for element 'Trenas4'
          _view.Trenas4.linkProperty("X",  function() { return xtm; }, function(_v) { xtm = _v; } ); // HtmlView Page linking property 'X' for element 'Trenas4'
          _view.Trenas4.linkProperty("Y",  function() { return ytm; }, function(_v) { ytm = _v; } ); // HtmlView Page linking property 'Y' for element 'Trenas4'
          _view.Trenas4.linkProperty("Text",  function() { return lentstring; }, function(_v) { lentstring = _v; } ); // HtmlView Page linking property 'Text' for element 'Trenas4'
          _view.Trenas4.linkProperty("Visibility",  function() { return vist; }, function(_v) { vist = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Trenas4'
          _view.bottomPanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'bottomPanel'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.initButton.setAction("OnClick", _initialize); // HtmlView Page setting action 'OnClick' for element 'initButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(50);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function empuxo_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = empuxo_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Introdução','./empuxo_Intro_1.html');

  return _view;
} // end of main function

function empuxo_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"titlePanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'titlePanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"borderLabel", _view.titlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'borderLabel'
      .setProperty("Text","<h2>Princípio de Arquimedes</h2> ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'borderLabel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"simPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'simPanel'
      .setProperty("CSS",{"page-break-inside":"avoid", "display":"block", "margin-left":"auto", "margin-right":"auto", "margin-top":"0", "margin-bottom":"0"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'simPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"tablePanel", _view.simPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tablePanel'
      .setProperty("CSS",{"display":"table", "table-layout":"auto", "margin-left":"auto", "margin-right":"auto", "border":"none", "padding":"0px", "vertical-align": "top" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'tablePanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topPanel", _view.tablePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topPanel'
      .setProperty("CSS",{"display":"block", "vertical-align": "center", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"mass", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mass'
      .setProperty("Text","massa") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'mass'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"mass_slider", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mass_slider'
      .setProperty("CSS",{"width":"40%"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'mass_slider'
      .setProperty("Minimum",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'mass_slider'
      .setProperty("Maximum",20) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'mass_slider'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"dens", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dens'
      .setProperty("Text","dens") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'dens'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"dens_slider", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dens_slider'
      .setProperty("CSS",{"width":"40%"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'dens_slider'
      .setProperty("Minimum",400) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'dens_slider'
      .setProperty("Maximum",2700) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'dens_slider'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"middlePanel", _view.tablePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'middlePanel'
      .setProperty("CSS",{"display":"table-row", "vertical-align": "middle", "border":"none", "padding":"0px", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'middlePanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"centerPanel", _view.middlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'centerPanel'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "center", "border":"none", "padding":"0px", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'centerPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.centerPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'drawingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"bloco", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bloco'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'bloco'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'bloco'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'bloco'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'bloco'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"piscina", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'piscina'
      .setProperty("FillColor","rgba(0,128,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'piscina'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'piscina'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'piscina'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'piscina'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"gramas", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'gramas'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'gramas'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"grama222", _view.gramas) // EJsS HtmlView.HtmlView Page: declaration of element 'grama222'
      .setProperty("FillColor","rgba(0,128,64,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'grama222'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'grama222'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'grama222'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'grama222'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'grama222'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"grama22", _view.gramas) // EJsS HtmlView.HtmlView Page: declaration of element 'grama22'
      .setProperty("FillColor","rgba(0,128,64,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'grama22'
      .setProperty("RelativePosition","SOUTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'grama22'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'grama22'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'grama22'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'grama22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"grama2", _view.gramas) // EJsS HtmlView.HtmlView Page: declaration of element 'grama2'
      .setProperty("FillColor","rgba(0,128,64,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'grama2'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'grama2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'grama2'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'grama2'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'grama2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"empuxo", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'empuxo'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'empuxo'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'empuxo'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'empuxo'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"peso", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'peso'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'peso'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'peso'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'peso'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"normal", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'normal'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'normal'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'normal'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"mass_text", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mass_text'
      .setProperty("RelativePosition","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mass_text'
      .setProperty("Font","normal normal 12px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'mass_text'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"dens_text", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dens_text'
      .setProperty("RelativePosition","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'dens_text'
      .setProperty("Font","normal normal 12px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'dens_text'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"trenas", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trenas'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Trenas0", _view.trenas) // EJsS HtmlView.HtmlView Page: declaration of element 'Trenas0'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Trenas0'
      .setProperty("Text","Trenas") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Trenas0'
      .setProperty("Font","normal normal 11px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Trenas0'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"Trenas1", _view.trenas) // EJsS HtmlView.HtmlView Page: declaration of element 'Trenas1'
      .setProperty("FillColor","rgba(255,255,192,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Trenas1'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Trenas1'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Trenas1'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'Trenas1'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Trenas1'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'Trenas1'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Trenas1'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'Trenas1'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"Trenas2", _view.trenas) // EJsS HtmlView.HtmlView Page: declaration of element 'Trenas2'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'Trenas2'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"Trenas3", _view.trenas) // EJsS HtmlView.HtmlView Page: declaration of element 'Trenas3'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Trenas3'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Trenas3'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'Trenas3'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'Trenas3'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"Trenas4", _view.trenas) // EJsS HtmlView.HtmlView Page: declaration of element 'Trenas4'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Trenas4'
      .setProperty("Font","normal normal 11px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Trenas4'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomPanel", _view.tablePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomPanel'
      .setProperty("CSS",{"display":"table-row", "vertical-align": "center", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomCell1", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomCell1'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomCell1'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.bottomCell1) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initButton", _view.bottomCell1) // EJsS HtmlView.HtmlView Page: declaration of element 'initButton'
      .setProperty("Tooltip","Initialize") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepback.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'initButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.bottomCell1) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"textPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'textPanel'
      .setProperty("Html","<h2>Instrução de uso</h2> <ul> <li>Descubra de densidade do fluido.</li> <li>Qual é o fluido?</li> <li>Pesquise na internet um amterial que ten densidade aproximadamente 500 kg/m3 </li> <li>Pesquise na internet um amterial que ten densidade aproximadamente 2700 kg/m3 </li> <li>O que determina se um objeto vai ou não afundar?</li> <li>Identifique os vetores vermelho, azul e preto</li> </ul>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'textPanel'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'textPanel'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Empuxo<br />
      </p>
      <p>
      <img alt="author image" src="figs/HAC_logo.png" />
 Humberto Carmona
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2020, Humberto Carmona, H. Carmona. Compiled with EJS 6.01 (201013)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new empuxo("_topFrame","library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
